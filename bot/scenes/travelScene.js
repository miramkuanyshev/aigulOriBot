const { Scenes } = require("telegraf");
require("../middleware/stage/stage");


const travelScene = new Scenes.BaseScene('travelScene');

travelScene.enter(async (ctx) =>{
    await ctx.replyWithPhoto({ source: 'bot/img/bassein.jpg' }, {
        caption: `–° –û—Ä–∏—Ñ–ª–µ–π–º–æ–º —è –Ω–∞—á–∞–ª–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å!`, 
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üëà –¢—É—Ä—Ü–∏—è üëâ', callback_data: 'tyrkey' }],
                [{ text: 'ü§ë –°–æ—á–∏ ü§ë', callback_data: 'sochi' }],
                [{ text: 'üí∞ –°–∞–Ω–∫—Ç - –ü–µ—Ç–µ—Ä–±—É—Ä–≥ üí∞', callback_data: 'spb' }],
                [{ text: 'üåè –ë–∞–º–±—É–∫–æ–≤—ã–π –ª–µ—Å üåè', callback_data: 'bambuk' }],
                [{ text: 'üì© –í –ú–ï–ù–Æ üì©', callback_data: 'menu' }]
            ]
        }
    })
});

travelScene.action('tyrkey', async (ctx) => {
    await ctx.replyWithPhoto({ source: 'bot/img/turk.jpg' }, {
        caption: `–¢—É—Ä—Ü–∏—è`, 
        reply_markup: {
            inline_keyboard: [
                [{ text: 'ü§ë –°–æ—á–∏ ü§ë', callback_data: 'sochi' }],
                [{ text: 'üí∞ –°–∞–Ω–∫—Ç - –ü–µ—Ç–µ—Ä–±—É—Ä–≥ üí∞', callback_data: 'spb' }],
                [{ text: 'üåè –ë–∞–º–±—É–∫–æ–≤—ã–π –ª–µ—Å üåè', callback_data: 'bambuk' }],
                [{ text: 'üì© –í –ú–ï–ù–Æ üì©', callback_data: 'menu' }]
            ]
        }
    })
});

travelScene.action('sochi', async (ctx) => {
    await ctx.replyWithPhoto({ source: 'bot/img/sochi.jpg' }, {
        caption: `–°–æ—á–∏`, 
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üëà –¢—É—Ä—Ü–∏—è üëâ', callback_data: 'tyrkey' }],
                [{ text: 'üí∞ –°–∞–Ω–∫—Ç - –ü–µ—Ç–µ—Ä–±—É—Ä–≥ üí∞', callback_data: 'spb' }],
                [{ text: 'üåè –ë–∞–º–±—É–∫–æ–≤—ã–π –ª–µ—Å üåè', callback_data: 'bambuk' }],
                [{ text: 'üì© –í –ú–ï–ù–Æ üì©', callback_data: 'menu' }]
            ]
        }
    })
});

travelScene.action('spb', async (ctx) => {
    await ctx.replyWithPhoto({ source: 'bot/img/spb.jpg' }, {
        caption: `–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥`, 
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üëà –¢—É—Ä—Ü–∏—è üëâ', callback_data: 'tyrkey' }],
                [{ text: 'ü§ë –°–æ—á–∏ ü§ë', callback_data: 'sochi' }],
                [{ text: 'üåè –ë–∞–º–±—É–∫–æ–≤—ã–π –ª–µ—Å üåè', callback_data: 'bambuk' }],
                [{ text: 'üì© –í –ú–ï–ù–Æ üì©', callback_data: 'menu' }]
            ]
        }
    })
});

travelScene.action('bambuk', async (ctx) => {
    await ctx.replyWithPhoto({ source: 'bot/img/les.jpg' }, {
        caption: `–ì–¥–µ-—Ç–æ`, 
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üëà –¢—É—Ä—Ü–∏—è üëâ', callback_data: 'tyrkey' }],
                [{ text: 'ü§ë –°–æ—á–∏ ü§ë', callback_data: 'sochi' }],
                [{ text: 'üí∞ –°–∞–Ω–∫—Ç - –ü–µ—Ç–µ—Ä–±—É—Ä–≥ üí∞', callback_data: 'spb' }],
                [{ text: 'üì© –í –ú–ï–ù–Æ üì©', callback_data: 'menu' }]
            ]
        }
    })
});

travelScene.action('menu', async (ctx) => {
    await ctx.scene.leave();
    await ctx.scene.enter('menuScene');
});

travelScene.on("message", async (ctx)=>{
    await ctx.reply('–Ø –í–∞—Å –Ω–µ–ø–æ–Ω–∏–º–∞—é, —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º!');
    await ctx.scene.reenter();
});

module.exports = travelScene;

